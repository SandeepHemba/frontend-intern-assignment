# Frontend Developer Intern Assignment – React + FastAPI

## Overview
This project is a **full-stack web application** built for the Frontend Developer Intern assignment.  
It includes a **React.js frontend** and a **FastAPI backend** with JWT authentication, password hashing, and a dashboard to manage tasks.  

The app demonstrates:
- Modern, responsive UI with React + TailwindCSS  
- User authentication (signup/login/logout)  
- CRUD operations for tasks  
- Profile fetching and updating  
- Protected routes  
- Form validation (client + server)  

---

## Features

### Authentication
- Signup / Login / Logout  
- JWT-based authentication  
- Password hashing with bcrypt  
- Protected routes (Dashboard accessible only when logged in)

### Dashboard & CRUD
- View and update user profile  
- Manage tasks:
  - **Create Task**  
  - **Read / List Tasks**  
  - **Update Task**  
  - **Delete Task**  
- Search & filter tasks  
- Responsive design (desktop, tablet, mobile)

---

## Tech Stack

| Layer      | Technology                 |
|------------|---------------------------|
| Frontend   | React.js, TailwindCSS      |
| Backend    | Python, FastAPI            |
| Database   | SQLite / PostgreSQL / MySQL|
| Auth       | JWT, bcrypt                |
| Tools      | Postman, VSCode, Git       |

---

## Project Structure

frontend-intern-assignment/
│
├─ frontend/ # React app
├─ backend/ # FastAPI backend
├─ screenshots/ # UI screenshots
├─ Postman_collection.json # API testing
├─ README.md
├─ .gitignore
└─ .env.example

Install dependencies:

pip install -r requirements.txt


Copy .env.example to .env and fill in your environment variables:

DB_HOST=
DB_USER=
DB_PASSWORD=
DB_NAME=
JWT_SECRET=


Start backend server:

uvicorn app:app --reload


Backend will run at http://127.0.0.1:8000

Frontend

Navigate to frontend folder:

cd frontend


Install dependencies:

npm install


Start React app:

npm start


Frontend will run at http://localhost:3000

API Endpoints (Postman Ready)

POST /api/signup – Register a new user

POST /api/login – Login user and get JWT token

GET /api/profile – Fetch logged-in user profile (protected)

PUT /api/profile – Update profile (protected)

GET /api/tasks – Get all tasks (protected)

POST /api/tasks – Create a new task (protected)

PUT /api/tasks/{TASK_ID} – Update a task (protected)

DELETE /api/tasks/{TASK_ID} – Delete a task (protected)

Postman collection attached: Postman_collection.json


Scaling for Production

Separate frontend and backend services

Dockerize both frontend and backend

Use cloud database (AWS RDS / MongoDB Atlas)

Add logging, monitoring, and rate limiting

Serve frontend via CDN for faster performance